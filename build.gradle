group 'kilobyte'
version '1.0-SNAPSHOT'

// Lists all the places where gradle will attempt to find listed dependencies
repositories {
    mavenCentral()
    maven {
        // Required both here and in the buildscript!
        url 'https://bintray.com/kotlin/kotlin-eap-1.1'
    }
}

// The buildscript is for the build.gradle file itself.
// That is why it contains dependencies for running the actual tasks
// in this gradle file, i.e. we cannot use the gradle plugins without
// this block. I guess you could call it a meta-dependencies block.
buildscript {
    ext.kotlin_version = '1.1.0'
    ext.dokka_version = '0.9.11'
    ext.junitPlatformVersion = '1.0.0-M3'

    repositories {
        mavenCentral()
        jcenter() // Required for Dokka
        maven {
            url 'https://bintray.com/kotlin/kotlin-eap-1.1'
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}"
    }
}

apply plugin: 'org.jetbrains.dokka'
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'project-report'
apply plugin: 'org.junit.platform.gradle.plugin'

ext.junitJupiterVersion  = '5.0.0-M3'
ext.junitPlatformVersion = '1.0.0-M3'

sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    // Used to remove a lot of Java boilerplate.
    compile 'org.projectlombok:lombok:1.16.8'

    // Used for the decompiler command line interface
    compile group: 'commons-cli', name: 'commons-cli', version: '1.3.1'

    // Used for StringUtils
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'

    // Used for checking Preconditions mostly
    compile 'com.google.guava:guava:19.0'

    // Used for the Either monad
    compile 'io.atlassian.fugue:fugue:4.3.0'

    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${junitJupiterVersion}"
    testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: "${junitPlatformVersion}"
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junitJupiterVersion}"
}

mainClassName = "kilobyte.decompiler.CommandLineDecompiler"

// Create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Version': version,
                'Main-Class': 'kilobyte.decompiler.CommandLineDecompiler'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task simulatorJar(type: Jar) {
    manifest {
        attributes 'Implementation-Version': version,
                'Main-Class': 'kilobyte.simulator.ui.SimulatorApplication'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }

    reports {
        junitXml.enabled = false
        html.enabled = true
    }

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

}


task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts'
    gradleVersion = '3.4'
}